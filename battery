#!/bin/bash

color100p="\033[0;32m"
color60p="\033[0;33m"
color20p="\033[0;31m"
color_shell="\033[0m"
color_charge="\033[0;36m"
NC="\033[0m"

colors=true 
live=false 
minimal=false
small=false
digits=false
fat=false
alt_charge=false

print_help () {
    printf "Usage:
  battery [-lsmbdfn]

OPTIONS
  -l              Monitor the battery live
  -s              Use a small version of the battery instead
  -f              Draws a slightly thicker battery
  -d              Prints the current battery as a number in the picture
  -m              Minimal print of the battery status
  -c              Use alternate charging symbol (requires nerd fonts)
  -n              Disable colors
  -b BAT_NUMBER   Specify battery number"
}

bat_number="$(find /sys/class/power_supply -iname 'BAT*' | sort -g | head -n 1)"

while getopts ":hnlmcsdfb:" option; do
      case $option in
    n)
        colors=false
        ;;
    l)
        live=true
        ;;
    m)
        minimal=true
        ;;
    s)
        small=true
        ;;
    d)
        digits=true
        ;;
    f)
        fat=true
        ;;
    c)
        alt_charge=true
        ;;
    b)
        bat_number="/sys/class/power_supply/BAT$OPTARG"
        if [ ! -d $bat_number ]; then
            echo "Battery not found! $bat_number does not exist."
            exit 1
        fi
        ;;
    h)
        print_help
        exit 0
        ;;
    esac
done

reset () {
    tput cnorm
    clear
}

cnorm () {
    tput cnorm
}

cnorm_small () {
    tput cud 5
    tput cnorm
}

if [[ $minimal == false ]] ; then
    if [[ $live == true ]]; then
        if [[ $small == true ]]; then
            trap cnorm_small EXIT
        else
            trap reset EXIT
        fi
    else 
        trap cnorm EXIT
    fi
fi

handle_event () {
    read -sn 1 -t 0.1 key
    if [ "$key" = "q" ] || [ "$key" = $'\e' ]; then 
        return 1
    else
        if [[ $key == "d" ]]; then
            if [[ $digits == true ]]; then
                digits=false
                redraw=0
            else
                digits=true
            fi
            main_loop
        fi
    fi
    return 0
}

redraw=0
blocks=0
old_color=$battery_color
old_num_length=${#bat}
old_blocks=$blocks
old_index=$(($indent+$blocks))

core_color () {
    if [[ $colors == true ]]; then 
        battery_color=$color100p

        if [ $bat -lt 60 ]; then
            battery_color=$color60p
        fi

        if [ $bat -lt 20 ]; then
            battery_color=$color20p
        fi

        if [[ "$battery_color" != "$old_color" ]]; then
            redraw=0
        fi
        old_color=$battery_color
    fi
}

check_digit_length_change () {
    if [[ $digits == true ]]; then
        if [[ "$old_num_length" != "${#bat}" ]]; then
            redraw=0
        fi
        old_num_length=${#bat}
    fi
}

print_digit_part () {
    for i in $(seq 0 5); do
        if (( $i < $2 )); then
            if [[ "${1:$i:1}" == "1" ]]; then
                printf " "
            else
                printf "█"
            fi
        else
            if [[ "${1:$i:1}" == "1" ]]; then
                printf "█"
            else
                printf " "
            fi
        fi
    done
    tput cub 6
}

print_digit () {
    tput cup $2 $3
    core_color
    if [[ $old_num_length != ${#bat} ]]; then
        redraw=0
    fi
    old_num_length=${#bat}

    printf "$battery_color"
    case $1 in 
    1) 
        print_digit_part "111100" $4
        tput cud 1    
        print_digit_part "001100" $4
        tput cud 1    
        print_digit_part "001100" $4
        tput cud 1    
        print_digit_part "001100" $4
        tput cud 1    
        print_digit_part "111111" $4
    ;;                
    2)                
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "000011" $4 
        tput cud 1    
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "110000" $4 
        tput cud 1    
        print_digit_part "111111" $4 
    ;;                
    3)                
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "000011" $4 
        tput cud 1    
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "000011" $4 
        tput cud 1    
        print_digit_part "111111" $4 
    ;;                
    4)                
        print_digit_part "110011" $4 
        tput cud 1    
        print_digit_part "110011" $4 
        tput cud 1    
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "000011" $4 
        tput cud 1    
        print_digit_part "000011" $4 
    ;;                
    5)                
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "110000" $4 
        tput cud 1    
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "000011" $4 
        tput cud 1    
        print_digit_part "111111" $4 
    ;;                
    6)                
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "110000" $4 
        tput cud 1    
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "110011" $4 
        tput cud 1    
        print_digit_part "111111" $4 
    ;;                
    7)                
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "000011" $4 
        tput cud 1    
        print_digit_part "000011" $4 
        tput cud 1    
        print_digit_part "000011" $4 
        tput cud 1    
        print_digit_part "000011" $4 
    ;;                
    8)                
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "110011" $4 
        tput cud 1    
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "110011" $4 
        tput cud 1    
        print_digit_part "111111" $4 
    ;;                
    9)                
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "110011" $4 
        tput cud 1    
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "000011" $4 
        tput cud 1    
        print_digit_part "111111" $4 
    ;;                
    0)                
        print_digit_part "111111" $4 
        tput cud 1    
        print_digit_part "110011" $4 
        tput cud 1    
        print_digit_part "110011" $4 
        tput cud 1    
        print_digit_part "110011" $4 
        tput cud 1    
        print_digit_part "111111" $4 
        ;;
    esac
}

bat_status () { 
    previous_bat=$bat
    previous_charge=$charging

    bat=$(cat $bat_number/capacity)
    blocks=$(($bat/3))
    fill_cols=$((bat/3+4))

    status=$(cat $bat_number/status)
    if [[ $status == "Discharging" ]] || [[ $status == "Not charging" ]]; then
        charging=0
    else
        charging=1
    fi
}

if [[ $minimal == true ]]; then
    bat_status
    echo "Battery: $bat%"
    if [[ $charging == 1 ]]; then
        echo "Charging: True"
    else
        echo "Charging: False"
    fi
    exit 0
fi

print_bat_row () {
i=0

printf "${shell_color}██"

while [ $i -le 33 ]; do
    if [ $i -le $blocks ]; then
        printf "${battery_color}█"
    else
        printf " "
    fi

    ((i+=1))
done

if [ $1 -eq 0 ]; then
    printf "${shell_color}████"
else 
    printf "${shell_color}████████"
fi
}

print_number () {
    if [[ $digits == false ]]; then
        return 0
    fi

    case $old_num_length in 
        1) 
            print_digit $bat $(($newl+2)) $(($indent+16)) 0
        ;;
        2)
            block1=0
            block2=0
            if (( $fill_cols > 12 )); then
                block1=$(($fill_cols-12))
                if (( $fill_cols > 20 )); then
                    block2=$(($fill_cols-20))
                fi
            fi

            print_digit ${bat:0:1} $(($newl+2)) $(($indent+12)) $block1
            print_digit ${bat:1} $(($newl+2)) $(($indent+20)) $block2
        ;;
        3)
            print_digit 1 $(($newl+2)) $(($indent+8))  100
            print_digit 0 $(($newl+2)) $(($indent+16)) 100
            print_digit 0 $(($newl+2)) $(($indent+24)) 100
        ;;
    esac
}

print_charge () {
    if [[ $fat == true ]]; then
        top1=" "
        top2=""
        mid1="█"
        mid2="█"
        bot1=""
        bot2=""

        if [[ $alt_charge == true ]]; then
        top1=""
        top2=""
        mid1="█"
        mid2=""
        bot1=""
        bot2=""
        fi

        tput cup $(($newl+3)) $(($indent+44))
        if [ $charging -eq 1 ]; then
            printf "      ${charge_color}$top1███████$top2"
        else
            printf "                 "
        fi


        tput cup $(($newl+4)) $(($indent+44))
        if [ $charging -eq 1 ]; then	
            printf "       ${charge_color}$mid1█$mid2"
        else
            printf "              "
        fi
        

        tput cup $(($newl+5)) $(($indent+44))
        if [ $charging -eq 1 ]; then	
            printf "   ${charge_color}$bot1███████$bot2"
        else
            printf "            "
        fi

    else
        end1="█"
        end2="█"

        if [[ $alt_charge == true ]]; then
        end1=""
        end2=""
        fi

        tput cup $(($newl+3)) $(($indent+44))
        if [ $charging -eq 1 ]; then	
            printf "       ${charge_color}$end1██████$end2"
        else
            printf "               "
        fi

        tput cup $(($newl+4)) $(($indent+44))
        if [ $charging -eq 1 ]; then	
            printf "    ${charge_color}$end1██████$end2"
        else
            printf "            "
        fi
    fi
}

change_column () {
    index=$(($indent+$blocks+2))
    if [[ $index > $old_index ]]; then
        old_index=$index
        new_sym="█"
    else
        old_index=$index
        index=$(($index+1))
        new_sym=" "
    fi

    tput cup $(($newl+1)) $index
    printf "$battery_color"

    for i in $(seq 0 $1); do
        printf "$new_sym"
        tput cud 1
        tput cub 1
    done
}

print_bat () {
    if [[ $fat == true ]]; then
        core_rows=6
    else
        core_rows=5
    fi

    if [[ $redraw == 0 ]]; then
        tput cup $newl $indent
        printf "${shell_color}████████████████████████████████████████\n"

        tput cup $(($newl+1)) $indent
        print_bat_row 0

        for i in $(seq 2 $core_rows); do
            tput cup $(($newl+$i)) $indent
            print_bat_row 1
        done

        tput cup $(($newl+$core_rows+1)) $indent
        print_bat_row 0

        tput cup $(($newl+$core_rows+2)) $indent
        printf "${shell_color}████████████████████████████████████████\n"

        redraw=1
    else
        if [[ $blocks == $old_blocks ]]; then
            return 0
        else
            change_column $core_rows
        fi
        old_blocks=$blocks
    fi
}

big_loop () {
    bat_status
    rows=$(tput lines)
    cols=$(tput cols)

    let rows=$rows newl=rows/2-3
    let cols=$cols indent=cols/2-25

    core_color
    check_digit_length_change

    print_bat
    print_charge
    print_number
}

small_bat_row () {
    blocks=$(($bat/7))
    i=0

    printf "${shell_color}██"
        while [ $i -le 14 ]; do
            if [ $i -le $blocks ]; then
                printf "${battery_color}█"
            else
                printf " "
            fi

            ((i+=1))
        done
            printf "${shell_color}███▊"
}

small_bat () {
    printf "\n"
    printf "${shell_color}███████████████████\n"

    small_bat_row

    if [ $charging -eq 1 ]; then	
        printf "   ${charge_color}▄▄▄\n"
    else
        printf "               \n"
    fi

    small_bat_row

    if [ $charging -eq 1 ]; then	
        printf "  ${charge_color}▀▀▀\n"
    else
        printf "            \n"
    fi

    printf "${shell_color}███████████████████\n"
}

small_loop () {
    bat_status
    core_color
    small_bat
}

main_loop () {
    if [[ $small == true ]]; then
        small_loop
        tput cuu 5
    else
        $1 || clear
        big_loop
    fi
}

battery_color=$NC
if [[ $colors == true ]]; then
    charge_color=$color_charge
    shell_color=$color_shell
else
    charge_color=$NC
    shell_color=$NC
fi


if [[ $small == false ]]; then
    clear
fi

tput civis
main_loop

if [[ $live == false ]]; then
    if [[ $small == true ]]; then
        tput cud 5
    else
        tput cup $(tput lines) 0 
    fi
else
    while [ 0 ]; do
        if [[ $(tput lines) != "$rows" ]] || [[ $(tput cols) != "$cols" ]]; then
            redraw=0
            main_loop "clear"
        fi

        if [[ "$previous_charge" != "$charging" ]] || [[ "$previous_bat" != "$bat" ]]; then
            main_loop 
        fi

        handle_event || break
        bat_status
    done
fi
