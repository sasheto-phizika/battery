#!/bin/bash

color100p="\033[0;32m"
color60p="\033[0;33m"
color20p="\033[0;31m"
color_shell="\033[0m"
color_charge="\033[0;36m"

colors=true 
live=false 
minimal=false
small=false
digits=false
fat=false
alt_charge=false

bat_number="$(find /sys/class/power_supply -iname 'BAT*' | sort -g | head -n 1)"

source ~/.config/battery/battery.conf 2> /dev/null

print_help () {
    printf "Usage:
  battery [-lsmbdfn]

OPTIONS
  -l              Monitor the battery live
  -s              Use a small version of the battery instead
  -f              Draws a slightly thicker battery
  -d              Prints the current capacity as a number in the battery
  -m              Minimal print of the battery status
  -c              Use alternate charging symbol (requires nerd fonts)
  -n              Disable colors
  -b BAT_NUMBER   Specify battery number"
}

while getopts ":hnlmcsdfb:" option; do
      case $option in
    n)
        if [[ $colors == true ]]; then
            colors=false
        else
            colors=true
        fi
    ;;
    l)
        if [[ $live == true ]]; then
            live=false
        else
            live=true
        fi
    ;;
    m)
        if [[ $minimal == true ]]; then
            minimal=false
        else
            minimal=true
        fi
    ;;
    s)
        if [[ $small == true ]]; then
            small=false
        else
            small=true
        fi
    ;;
    d)
        if [[ $digits == true ]]; then
            digits=false
        else
            digits=true
        fi
    ;;
    f)
        if [[ $fat == true ]]; then
            fat=false
        else
            fat=true
        fi
    ;;
    c)
        if [[ $alt_charge == true ]]; then
            alt_charge=false
        else
            alt_charge=true
        fi
    ;;
    b)
        bat_number="/sys/class/power_supply/BAT$OPTARG"
        if [ ! -d $bat_number ]; then
            echo "Battery not found! $bat_number does not exist."
            exit 1
        fi
    ;;
    h)
        print_help
        exit 0
    ;;
    esac
done

if [[ $small == false ]]; then
    if [[ $minimal == false ]]; then
        trap "tput cup $(tput lines) 0; tput cnorm" EXIT
    fi
    clear
else
    trap 'tput cud 5; tput cnorm' EXIT
fi

handle_event () {
    read -sn 1 -t 0.1 key > /dev/null

    case $key in 
        "q" | $'\e')
            return 1
        ;;
        "d")
            if [[ $digits == true ]]; then
                digits=false
            else
                digits=true
            fi

            check_number_length_change
            print_number &
        ;;
        "r")
            redraw=0
            main_loop
        ;;
    esac
    return 0
}

redraw=0
blocks=0
old_color=$battery_color
old_num_length=${#bat}
old_blocks=$blocks
old_index=$(($indent+$blocks))

bat_status () { 
    previous_bat=$bat
    previous_charge=$charging

    bat=$(cat $bat_number/capacity)
    blocks=$(($bat/3))
    fill_cols=$((bat/3+4))

    status=$(cat $bat_number/status)
    if [[ $status == "Discharging" ]] || [[ $status == "Not charging" ]]; then
        charging=0
    else
        charging=1
    fi
}

set_core_color () {
    if [[ $colors == true ]]; then 
        battery_color=$color100p

        if (( $bat < 60 )) then
            battery_color=$color60p
        fi

        if (( $bat < 20 )); then
            battery_color=$color20p
        fi

        if [[ "$battery_color" != "$old_color" ]]; then
            redraw=0
        fi
        old_color=$battery_color
    fi
}

check_number_length_change () {
    if [[ $digits == true ]]; then
        if [[ "$old_num_length" != "${#bat}" ]]; then
            redraw=0
        fi
        old_num_length=${#bat}
    fi
}

print_digit () {
    case $1 in 
    0)                
        chars="111111110011110011110011111111"
        ;;
    1) 
        chars="111100001100001100001100111111"
    ;;                
    2)                
        chars="111111000011111111110000111111"  
    ;;                
    3)                
        chars="111111000011111111000011111111"  
    ;;                
    4)                
        chars="110011110011111111000011000011"  
    ;;                
    5)                
        chars="111111110000111111000011111111"  
    ;;                
    6)                
        chars="111111110000111111110011111111"  
    ;;                
    7)                
        chars="111111000011000011000011000011"  
    ;;                
    8)                
        chars="111111110011111111110011111111"  
    ;;                
    9)                
        chars="111111110011111111000011111111"  
    ;;                
    esac

    if [[ $digits == false ]]; then
        chars="000000000000000000000000000000"
    fi

    num="$battery_color\033[$2;$3H"

    for i in $(seq 0 29); do
        if (( $i % 6 < $4 )); then
            if [[ "${chars:$i:1}" == "1" ]]; then
                num+=" "
            else
                num+="█"
            fi
        else
            if [[ "${chars:$i:1}" == "1" ]]; then
                num+="█"
            else
                num+=" "
            fi
        fi

        if (( $i % 6 == 5 )); then
            num+="\033[$(($2 + ($i+1) / 6));$3H"
        fi
    done
    printf "$num"
}

print_number () {

    case $old_num_length in 
        1) 
            print_digit $bat $(($newl+2)) $(($indent+16)) 0
        ;;
        2)
            blocks1=0
            blocks2=0
            if (( $fill_cols > 12 )); then
                blocks1=$(($fill_cols-13))
                if (( $fill_cols > 20 )); then
                    blocks2=$(($fill_cols-21))
                fi
            fi

            print_digit ${bat:0:1} $(($newl+2)) $(($indent+12)) $blocks1 &
            print_digit ${bat:1} $(($newl+2)) $(($indent+20)) $blocks2 &
        ;;
        3)
            print_digit 1 $(($newl+2)) $(($indent+8))  100 &
            print_digit 0 $(($newl+2)) $(($indent+16)) 100 &
            print_digit 0 $(($newl+2)) $(($indent+24)) 100 &
        ;;
    esac

    tput cup $(tput lines) 0
}

print_charge () {
    if [[ $fat == true ]]; then
        top1=" "
        top2=""
        mid1="█"
        mid2="█"
        bot1=""
        bot2=""

        if [[ $alt_charge == true ]]; then
        top1=""
        top2=""
        mid1="█"
        mid2=""
        bot1=""
        bot2=""
        fi

        charge="\033[$(($newl+3));$(($indent+44))H"
        if [ $charging -eq 1 ]; then
            charge+="      ${charge_color}$top1███████$top2"
        else
            charge+="                 "
        fi


        charge+="\033[$(($newl+4));$(($indent+44))H"
        if [ $charging -eq 1 ]; then	
            charge+="       ${charge_color}$mid1█$mid2"
        else
            charge+="              "
        fi
        

        charge+="\033[$(($newl+5));$(($indent+44))H"
        if [ $charging -eq 1 ]; then	
            charge+="   ${charge_color}$bot1███████$bot2"
        else
            charge+="            "
        fi

    else
        end1="█"
        end2="█"

        if [[ $alt_charge == true ]]; then
        end1=""
        end2=""
        fi

        charge="\033[$(($newl+3));$(($indent+44))H"
        if [ $charging -eq 1 ]; then	
            charge+="       ${charge_color}$end1██████$end2"
        else
            charge+="               "
        fi

        charge+="\033[$(($newl+4));$(($indent+44))H"
        if [ $charging -eq 1 ]; then	
            charge+="    ${charge_color}$end1██████$end2"
        else
            charge+="            "
        fi
    fi
    printf "$charge"
    tput cup $(tput cols) 0
}

print_bat_row () {
    i=0

    row="${shell_color}██"

    while [ $i -le 33 ]; do
        if [ $i -le $blocks ]; then
            row+="${battery_color}█"
        else
            row+=" "
        fi

        ((i+=1))
    done

    if [ $1 -eq 0 ]; then
        row+="${shell_color}████"
    else 
        row+="${shell_color}████████"
    fi
    printf "$row"
}

print_col () {
    index=$(($indent+$blocks+2))
    if [[ $index > $old_index ]]; then
        old_index=$index
        new_sym="█"
    else
        old_index=$index
        index=$(($index+1))
        new_sym=" "
    fi

    col="$battery_color"

    for i in $(seq 0 $1); do
        col+="\033[$(($newl+$i+1));$(($index))H$new_sym"
    done
    printf "$col"
}

print_bat () {
    if [[ $fat == true ]]; then
        core_rows=6
    else
        core_rows=5
    fi

    if [[ $redraw == 0 ]]; then
        printf "\033[$newl;$((indent))H${shell_color}████████████████████████████████████████\n" & 
        printf "\033[$(($newl+1));$(($indent))H$(print_bat_row 0 &)" &

        for i in $(seq 2 $core_rows); do
                printf "\033[$(($newl+$i));$(($indent))H$(print_bat_row 1 &)" &
        done

        printf "\033[$(($newl+$core_rows+1));$(($indent))H$(print_bat_row 0 &)" &
        printf "\033[$(($newl+$core_rows+2));$(($indent))H${shell_color}████████████████████████████████████████\n" &

        redraw=1
        printf "$img"

    else
        if [[ $blocks == $old_blocks ]]; then
            return 0
        else
            print_col $core_rows
        fi
        old_blocks=$blocks
    fi

    tput cup $(tput lines) 0
}

big_loop () {
    if [[ "$1" == "resize" ]]; then
        clear
        rows=$(tput lines)
        cols=$(tput cols)

        let rows=$rows newl=rows/2-2
        let cols=$cols indent=cols/2-24
    fi

    set_core_color
    check_number_length_change

    print_bat
    print_charge &
    print_number &
}

print_small_bat_row () {
    blocks=$(($bat/7))
    i=0

    printf "${shell_color}██"
        while [ $i -le 14 ]; do
            if [ $i -le $blocks ]; then
                printf "${battery_color}█"
            else
                printf " "
            fi

            ((i+=1))
        done
            printf "${shell_color}███▊"
}

print_small_bat () {
    printf "\n"
    printf "${shell_color}███████████████████\n"

    print_small_bat_row

    if [ $charging -eq 1 ]; then	
        printf "   ${charge_color}▄▄▄\n"
    else
        printf "               \n"
    fi

    print_small_bat_row

    if [ $charging -eq 1 ]; then	
        printf "  ${charge_color}▀▀▀\n"
    else
        printf "            \n"
    fi

    printf "${shell_color}███████████████████\n"
}

small_loop () {
    set_core_color
    print_small_bat

    if [[ $live == true ]]; then
        tput cuu 5
    fi
}

main_loop () {
    if [[ $small == true ]]; then
        small_loop
    else
        big_loop $1
    fi
}

battery_color="\033[0m"
if [[ $colors == true ]]; then
    charge_color=$color_charge
    shell_color=$color_shell
else
    charge_color="\033[0m"
    shell_color="\033[0m"
fi

if [[ $minimal == true ]]; then
    bat_status
    echo "Battery: $bat%"
    if [[ $charging == 1 ]]; then
        echo "Charging: True"
    else
        echo "Charging: False"
    fi
    exit 0
fi

tput civis
bat_status
main_loop "resize" &

if [[ $small == false ]]; then
    tput cup $(tput lines) 0
fi

if [[ $live == true ]]; then
    while [ 0 ]; do
        if [[ $(tput lines) != "$rows" ]] || [[ $(tput cols) != "$cols" ]]; then
            redraw=0
            main_loop "resize"
        fi

        if [[ "$previous_charge" != "$charging" ]] || [[ "$previous_bat" != "$bat" ]]; then
            main_loop
        fi

        handle_event || break
        bat_status
    done
fi
