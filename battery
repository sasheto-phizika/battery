#!/bin/bash

color100p="\033[0;32m"
color60p="\033[0;33m"
color20p="\033[0;31m"
color_shell="\033[0m"
color_charge="\033[0;36m"
NC="\033[0m"

colors=true 
live=false 
minimal=false
small=false

bat_number="$(find /sys/class/power_supply -iname 'BAT*' | sort -g | head -n 1)"

while getopts ":hnlmsb:" option; do
      case $option in
    n)
        colors=false
        ;;
    l)
        live=true
        ;;
    m)
        minimal=true
        ;;
    s)
        small=true
        ;;
    b)
        bat_number="/sys/class/power_supply/BAT$OPTARG"
        if [ ! -d $bat_number ]; then
            echo "Battery not found! $bat_number does not exist."
            exit 1
        fi
        ;;
    h)
        echo "Usage:" 
        echo "  battery [-lsmbn]"
        echo " "
        echo "OPTIONS"
        echo "  -l              Monitor the battery live"
        echo "  -s              Use a small version of the battery instead"
        echo "  -m              Minimal print of the battery status" 
        echo "  -n              Remove colors"
        echo "  -b BAT_NUMBER   Specify battery number"
        exit 0
        ;;
    esac
done

reset() {
    tput reset
}

cnorm () {
    tput cnorm
}

cnorm_small () {
    tput cud 5
    tput cnorm
}

if [[ $minimal == false ]] ; then
    if [[ $live == true ]]; then
        if [[ $small == true ]]; then
            trap cnorm_small EXIT
        else
            trap reset EXIT
        fi
    else 
        trap cnorm EXIT
    fi
fi

quit? () {
    read -sn 1 -t 0.1 quit 
    if [ "$quit" = "q" ] || [ "$quit" = $'\e' ]; then 
        return 1
    fi
    return 0
}

bat_status () { 
    previous_bat=$bat
    previous_charge=$charging

    bat=$(cat "$bat_number/capacity")
    let blocks=$bat/3*3

    status=$(cat "$bat_number/status")
    if [[ $status == "Discharging" ]] || [[ $status == "Not charging" ]]; then
        charging=0
    else
        charging=1
    fi
 }


if [[ $minimal == true ]]; then
    bat_status
    echo "Battery: $bat%"
    if [[ $charging == 1 ]]; then
        echo "Charging: True"
    else
        echo "Charging: False"
    fi
    exit 0
fi

batpiece () {
i=0

printf "${shell_color}██"

if [[ $blocks == 0 ]]; then
    printf "                                  "

    if [ $1 -eq 0 ]; then
        printf "${shell_color}████"
    else 
        printf "${shell_color}████████"
    fi

else
    while [ $i -le 100 ]; do
        if [ $i -le $blocks ]; then
            printf "${battery_color}█"
        else
            printf " "
        fi

        ((i+=3))
    done

    if [ $1 -eq 0 ]; then
        printf "${shell_color}████"
    else 
        printf "${shell_color}████████"
    fi
fi
}

printbat () {
    tput cup $newl $indent
    printf "${shell_color}████████████████████████████████████████\n"

    tput cup $(($newl+1)) $indent
    batpiece 0

    tput cup $(($newl+2)) $indent
    batpiece 1

    tput cup $(($newl+3)) $indent
    batpiece 1

    if [ $charging -eq 1 ]; then	
        printf "       ${charge_color}████████"
    else
        printf "               "
    fi

    tput cup $(($newl+4)) $indent
    batpiece 1

    if [ $charging -eq 1 ]; then	
        printf "    ${charge_color}████████"
    else
        printf "            "
    fi

    
    tput cup $(($newl+5)) $indent
    batpiece 1


    tput cup $(($newl+6)) $indent
    batpiece 0

    tput cup $(($newl+7)) $indent
    printf "${shell_color}████████████████████████████████████████\n"
}

big_loop () {
    bat_status
    rows=$(tput lines)
    cols=$(tput cols)

    let rows=$rows newl=rows/2-3
    let cols=$cols indent=cols/2-28

    core_color
    printbat
}

smallpiece() {
let blocks=$bat/7*7
i=0

printf "${shell_color}██"

if [[ $blocks == 0 ]]; then 
    printf "               ${shell_color}███▊"
else
    while [ $i -le 100 ]; do
        if [ $i -le $blocks ]; then
            printf "${battery_color}█"
        else
            printf " "
        fi

        ((i+=7))
    done

        printf "${shell_color}███▊"
fi

}

smallbat() {
        echo ""
        printf "${shell_color}███████████████████\n"

        smallpiece

        if [ $charging -eq 1 ]; then	
            printf "   ${charge_color}▄▄▄\n"
        else
            printf "               \n"
        fi

        smallpiece

        if [ $charging -eq 1 ]; then	
            printf "  ${charge_color}▀▀▀\n"
        else
            printf "            \n"
        fi

        printf "${shell_color}███████████████████\n"
}



small_loop() {
        bat_status
        core_color
        smallbat
}

main_loop() {
    if [[ $small == true ]]; then
        small_loop
        tput cuu 5
    else
        clear
        big_loop
    fi
}

core_color () {
    if [[ $colors == true ]]; then 
        battery_color=$color100p

        if [ $bat -lt 60 ]; then
            battery_color=$color60p
        fi

        if [ $bat -lt 20 ]; then
            battery_color=$color20p
        fi
    fi
}

battery_color=$NC
if [[ $colors == true ]]; then
    charge_color=$color_charge
    shell_color=$color_shell
else
    charge_color=$NC
    shell_color=$NC
fi

tput civis
main_loop

if [[ $live == false ]]; then
    if [[ $small == true ]]; then
        tput cud 5
    else
        tput cup $(tput lines) 0 
    fi
else
    while [ 0 ]; do
        if [[ $(tput lines) != "$rows" ]] || [[ $(tput cols) != "$cols" ]]; then
            main_loop
            quit? || break
            continue
        fi

        if [[ "$previous_charge" != "$charging" ]] || [[ "$previous_bat" != "$bat" ]]; then
            main_loop
            quit? || break
            continue
        fi

        quit? || break
        bat_status
    done
fi
