#!/bin/bash

colors=false 
live=false 
minimal=true

while getopts "hclm" option; do
      case $option in
    c)
        colors=true
        ;;
    l)
        live=true
        ;;
    m)
        minimal=true
        ;;
    h)
        echo "Usage:" 
        echo "  battery [-cl]"
        echo " "
        echo "OPTIONS"
        echo "  -c   Add colors"
        echo "  -l   Monitor the battery live"
        exit 0
        ;;
    *)
        echo "Usage: battery [-cl]" 
        exit 1
    esac
done

function cleanup() {
    tput reset
}

if [[ $live == true ]] && [[ $minimal == false ]]; then
    trap cleanup EXIT
fi

megaintdent () {
i=0

while [ $i -le $1 ]; do 
	printf " "
	((i++))
done	

}


printbat () {
let blocks=$1/3*3
i=0

printf "██"



while [ $i -le 100 ]; do
	if [ $i -le $blocks ]; then
		printf "${battery_color}█${NC}"
	else
		printf " "
	fi

	((i+=3))
done

if [ $2 -eq 0 ]; then
	printf "████"
else 
	printf "████████"
fi

}

quit? () {
    read -sn 1 -t 0.1 quit 
    if [ "$quit" = "q" ] || [ "$quit" = $'\e' ]; then 
        return 1
    fi

    return 0
}

time=0

bat=$(upower -i /org/freedesktop/UPower/devices/DisplayDevice | grep -E '[[:digit:]]{1,}%' | tr -dc 0-9)
upower -i /org/freedesktop/UPower/devices/DisplayDevice | grep 'discharging' > /dev/null
charging=$?

if [[ $minimal == true ]]; then
    echo "Battery: $bat%"
    echo "Charging: $charging"
    exit 0
fi

previous_bat=0
previous_charge=0

while [ 0 ]
do
    if [ $(echo "$time % 10" | bc) -eq 0 ]; then
        if [[ "$previous_charge" == "$charging" ]] && [[ "$previous_bat" == "$bat" ]]; then
            quit? || break
            continue
        fi

        clear

        battery_color='\033[0m'
        charge_color='\033[0m'
        NC='\033[0m'

        let rows=$(tput lines) newl=rows/2-3

        i=0

        while [ $i -le $newl ]; do 
            printf "\n"
            ((i++))
        done 

        let cols=$(tput cols) newl=cols/2-25

        if [[ $colors == true ]]; then 
            battery_color='\e[38;2;166;227;161m'
            charge_color='\e[38;2;116;199;236m'
        
            if [ $bat -lt 60 ]; then
                battery_color='\e[38;2;250;179;135m'
            fi

            if [ $bat -lt 20 ]; then
                battery_color='\e[38;2;243;139;168m'
            fi
        fi


        megaintdent $newl 
        printf "████████████████████████████████████████\n"

        megaintdent $newl
        printbat $bat 0
        echo " " 

        megaintdent $newl
        printbat $bat 1
        echo " "
        megaintdent $newl
        printbat $bat 1

        if [ $charging -eq 1 ]; then	
            printf "       ${charge_color}████████${NC}"
        fi
        echo " "			
        megaintdent $newl
        printbat $bat 1

        if [ $charging -eq 1 ]; then	
            printf "    ${charge_color}████████${NC}"
        fi
        echo " "

        megaintdent $newl
        printbat $bat 1
        echo " "

        megaintdent $newl
        printbat $bat 0
        echo " "

        megaintdent $newl
        printf "████████████████████████████████████████\n"

        let rows=$(tput lines) newl=rows/2-5

        i=0
        while [ $i -le $newl ]; do 
            printf "\n"
            ((i++))
        done

        previous_bat=$bat
        previous_charge=$charging

        bat=$(upower -i /org/freedesktop/UPower/devices/DisplayDevice | grep -E '[[:digit:]]{1,}%' | tr -dc 0-9)
        upower -i /org/freedesktop/UPower/devices/DisplayDevice | grep 'discharging' > /dev/null
        charging=$?
    fi 

    if [[ $live == false ]]; then
        break
    fi

    tput civis

    time=$(echo "$time+1" | bc)

    quit? || break

done
