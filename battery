#!/bin/bash

color100p="\033[0;32m"
color60p="\033[0;33m"
color20p="\033[0;31m"
color_shell="\033[0m"
color_charge="\033[0;36m"
NC="\033[0m"

colors=true 
live=false 
minimal=false
small=false
digits=false
fat=false
altcharge=false

bat_number="$(find /sys/class/power_supply -iname 'BAT*' | sort -g | head -n 1)"

while getopts ":hnlmcsdfb:" option; do
      case $option in
    n)
        colors=false
        ;;
    l)
        live=true
        ;;
    m)
        minimal=true
        ;;
    s)
        small=true
        ;;
    d)
        digits=true
        ;;
    f)
        fat=true
        ;;
    c)
        altcharge=true
        ;;
    b)
        bat_number="/sys/class/power_supply/BAT$OPTARG"
        if [ ! -d $bat_number ]; then
            echo "Battery not found! $bat_number does not exist."
            exit 1
        fi
        ;;
    h)
        echo "Usage:" 
        echo "  battery [-lsmbdfn]"
        echo " "
        echo "OPTIONS"
        echo "  -l              Monitor the battery live"
        echo "  -s              Use a small version of the battery instead"
        echo "  -f              Draws a slightly thicker battery" 
        echo "  -d              Prints the current battery as a number in the picture" 
        echo "  -m              Minimal print of the battery status" 
        echo "  -c              Use alternate charging symbol (requires nerd fonts)"
        echo "  -n              Disable colors"
        echo "  -b BAT_NUMBER   Specify battery number"
        exit 0
        ;;
    esac
done

reset() {
    tput reset
}

cnorm () {
    tput cnorm
}

cnorm_small () {
    tput cud 5
    tput cnorm
}

if [[ $minimal == false ]] ; then
    if [[ $live == true ]]; then
        if [[ $small == true ]]; then
            trap cnorm_small EXIT
        else
            trap reset EXIT
        fi
    else 
        trap cnorm EXIT
    fi
fi

quit? () {
    read -sn 1 -t 0.1 quit 
    if [ "$quit" = "q" ] || [ "$quit" = $'\e' ]; then 
        return 1
    else
        if [[ $quit == "d" ]]; then
            if [[ $digits == true ]]; then
                digits=false
            else
                digits=true
            fi
            main_loop
        fi
    fi
    return 0
}

core_color () {
    if [[ $colors == true ]]; then 
        battery_color=$color100p

        if [ $bat -lt 60 ]; then
            battery_color=$color60p
        fi

        if [ $bat -lt 20 ]; then
            battery_color=$color20p
        fi
    fi
}

print_dpart () {
    if (( $1 > 0 )); then
        tput cuf $1
    fi 

    for i in $(seq $(($1+1)) $2); do
        if (( $i < $3 )); then
            printf " "
        else
            printf "█"
        fi
    done
    tput cub $2
}

print_digit () {
    tput cup $2 $3
    core_color
    printf "$battery_color"
    case $1 in 
    1) 
        print_dpart 0 4 $4
        tput cud 1    
        print_dpart 2 4 $4
        tput cud 1    
        print_dpart 2 4 $4
        tput cud 1    
        print_dpart 2 4 $4
        tput cud 1    
        print_dpart 0 6 $4
    ;;                
    2)                
        print_dpart 0 6 $4 
        tput cud 1    
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 0 6 $4
        tput cud 1    
        print_dpart 0 2 $4 
        tput cud 1    
        print_dpart 0 6 $4 
    ;;                
    3)                
        print_dpart 0 6 $4 
        tput cud 1    
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 0 6 $4
        tput cud 1    
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 0 6 $4 
    ;;                
    4)                
        print_dpart 0 2 $4 
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 0 2 $4 
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 0 6 $4
        tput cud 1    
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 4 6 $4 
    ;;                
    5)                
        print_dpart 0 6 $4 
        tput cud 1    
        print_dpart 0 2 $4 
        tput cud 1    
        print_dpart 0 6 $4
        tput cud 1    
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 0 6 $4 
    ;;                
    6)                
        print_dpart 0 6 $4 
        tput cud 1    
        print_dpart 0 2 $4 
        tput cud 1    
        print_dpart 0 6 $4
        tput cud 1    
        print_dpart 0 2 $4 
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 0 6 $4 
    ;;                
    7)                
        print_dpart 0 6 $4 
        tput cud 1    
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 4 6 $4
        tput cud 1    
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 4 6 $4 
    ;;                
    8)                
        print_dpart 0 6 $4 
        tput cud 1    
        print_dpart 0 2 $4 
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 0 6 $4
        tput cud 1    
        print_dpart 0 2 $4 
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 0 6 $4 
    ;;                
    9)                
        print_dpart 0 6 $4 
        tput cud 1    
        print_dpart 0 2 $4 
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 0 6 $4
        tput cud 1    
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 0 6 $4 
    ;;                
    0)                
        print_dpart 0 6 $4 
        tput cud 1    
        print_dpart 0 2 $4 
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 0 2 $4 
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 0 2 $4 
        print_dpart 4 6 $4 
        tput cud 1    
        print_dpart 0 6 $4 
        ;;
    esac
}
bat_status () { 
    previous_bat=$bat
    previous_charge=$charging

    bat=$(cat "$bat_number/capacity")
    blocks=$(($bat/3*3))
    fill_cols=$((bat/3+4))

    status=$(cat "$bat_number/status")
    if [[ $status == "Discharging" ]] || [[ $status == "Not charging" ]]; then
        charging=0
    else
        charging=1
    fi
}


if [[ $minimal == true ]]; then
    bat_status
    echo "Battery: $bat%"
    if [[ $charging == 1 ]]; then
        echo "Charging: True"
    else
        echo "Charging: False"
    fi
    exit 0
fi

batpiece () {
i=0

printf "${shell_color}██"

if [[ $blocks == 0 ]]; then
    printf "                                  "

else
    while [ $i -le 100 ]; do
        if [ $i -le $blocks ]; then
            printf "${battery_color}█"
        else
            printf " "
        fi

        ((i+=3))
    done

fi

if [ $1 -eq 0 ]; then
    printf "${shell_color}████"
else 
    printf "${shell_color}████████"
fi
}
print_number () {
    if [[ $digits == false ]]; then
        return 0
    fi
    if [[ $bat == 100 ]]; then
        print_digit 1 $(($newl+2)) $(($indent+8))  100
        print_digit 0 $(($newl+2)) $(($indent+16)) 100
        print_digit 0 $(($newl+2)) $(($indent+24)) 100
    else 
        if (( $bat < 10 )); then
            print_digit $bat $(($newl+2)) $(($indent+16)) 0
        else 
            block1=0
            block2=0
            if (( $fill_cols > 12 )); then
                block1=$(($fill_cols-12))
                if (( $fill_cols > 20 )); then
                    block2=$(($fill_cols-20))
                fi
            fi

            print_digit ${bat:0:1} $(($newl+2)) $(($indent+12)) $block1
            print_digit ${bat:1} $(($newl+2)) $(($indent+20)) $block2
        fi
    fi
}

printfat () {

    top1=" "
    top2=""
    mid1="█"
    mid2="█"
    bot1=""
    bot2=""

    if [[ $altcharge == true ]]; then
    top1=""
    top2=""
    mid1="█"
    mid2=""
    bot1=""
    bot2=""
    fi

    tput cup $newl $indent
    printf "${shell_color}████████████████████████████████████████\n"

    tput cup $(($newl+1)) $indent
    batpiece 0

    tput cup $(($newl+2)) $indent
    batpiece 1


    tput cup $(($newl+3)) $indent
    batpiece 1
    
    if [ $charging -eq 1 ]; then
        printf "      ${charge_color}$top1███████$top2"
    else
        printf "                 "
    fi


    tput cup $(($newl+4)) $indent
    batpiece 1

    if [ $charging -eq 1 ]; then	
        printf "       ${charge_color}$mid1█$mid2"
    else
        printf "              "
    fi
    
    tput cup $(($newl+5)) $indent
    batpiece 1

    if [ $charging -eq 1 ]; then	
        printf "   ${charge_color}$bot1███████$bot2"
    else
        printf "           "
    fi

    tput cup $(($newl+6)) $indent
    batpiece 1


    tput cup $(($newl+7)) $indent
    batpiece 0

    tput cup $(($newl+8)) $indent
    printf "${shell_color}████████████████████████████████████████\n"

    print_number
}

printbat () {

    end1="█"
    end2="█"

    if [[ $altcharge == true ]]; then
    end1=""
    end2=""
    fi

    tput cup $newl $indent
    printf "${shell_color}████████████████████████████████████████\n"

    tput cup $(($newl+1)) $indent
    batpiece 0

    tput cup $(($newl+2)) $indent
    batpiece 1


    tput cup $(($newl+3)) $indent
    batpiece 1

    if [ $charging -eq 1 ]; then	
        printf "       ${charge_color}$end1██████$end2"
    else
        printf "               "
    fi


    tput cup $(($newl+4)) $indent
    batpiece 1

    if [ $charging -eq 1 ]; then	
        printf "    ${charge_color}$end1██████$end2"
    else
        printf "            "
    fi
    
    tput cup $(($newl+5)) $indent
    batpiece 1

    tput cup $(($newl+6)) $indent
    batpiece 0

    tput cup $(($newl+7)) $indent
    printf "${shell_color}████████████████████████████████████████\n"

    print_number
}

big_loop () {
    bat_status
    rows=$(tput lines)
    cols=$(tput cols)

    let rows=$rows newl=rows/2-3
    let cols=$cols indent=cols/2-25

    core_color
    if [[ $fat == true ]]; then
        printfat
    else
        printbat
    fi
}

smallpiece() {
blocks=$(($bat/7*7))
i=0

printf "${shell_color}██"

if [[ $blocks == 0 ]]; then 
    printf "               ${shell_color}███▊"
else
    while [ $i -le 100 ]; do
        if [ $i -le $blocks ]; then
            printf "${battery_color}█"
        else
            printf " "
        fi

        ((i+=7))
    done

        printf "${shell_color}███▊"
fi

}

smallbat() {
        echo ""
        printf "${shell_color}███████████████████\n"

        smallpiece

        if [ $charging -eq 1 ]; then	
            printf "   ${charge_color}▄▄▄\n"
        else
            printf "               \n"
        fi

        smallpiece

        if [ $charging -eq 1 ]; then	
            printf "  ${charge_color}▀▀▀\n"
        else
            printf "            \n"
        fi

        printf "${shell_color}███████████████████\n"
}

small_loop() {
        bat_status
        core_color
        smallbat
}

main_loop() {
    if [[ $small == true ]]; then
        small_loop
        tput cuu 5
    else
        $1 || clear
        big_loop
    fi
    tput cup $newl $indent
}

battery_color=$NC
if [[ $colors == true ]]; then
    charge_color=$color_charge
    shell_color=$color_shell
else
    charge_color=$NC
    shell_color=$NC
fi


if [[ $small == false ]]; then
    clear
fi

tput civis
main_loop

if [[ $live == false ]]; then
    if [[ $small == true ]]; then
        tput cud 5
    else
        tput cup $(tput lines) 0 
    fi
else
    while [ 0 ]; do
        if [[ $(tput lines) != "$rows" ]] || [[ $(tput cols) != "$cols" ]]; then
            main_loop "clear"
        fi

        if [[ "$previous_charge" != "$charging" ]] || [[ "$previous_bat" != "$bat" ]]; then
            main_loop 
        fi

        quit? || break
        bat_status
    done
fi
